# Control Structures

Conditional executions control the flow of the execution. 

**Conditional Statements and Loops in R**



i. `if-else`: We use when we want to select between two (or more) options.

ii. `for`: We use when we want to repeat a block of code a fixed number of times, usually over a sequence.

iii. `while`: We use when we want to repeat a block of code as long as a condition is true.

iv. `repeat`: We use when we want to repeat a block of code indefinitely until we manually stop it (usually with break).

v. `break`: We use when we want to exit a loop immediately.

vi. `next`: We use when we want to skip the current iteration of a loop and continue with the next one.

vii. `switch`: We use when we want to select one option from many possible choices, based on a value.

## if-else

**Teaching analogy**

Draw a star on star-shaped cookies and draw a heart on heart-shaped cookies.


```{r, echo=FALSE}
knitr::include_graphics(here::here("img", "chap5", "ifelse.png"))


```

**Syntax**

In programming, we use `if–else` when we need to choose between two possible options:

  - The `if` block executes when the condition is true.

  - The `else` block executes when the condition is false.

``` r
if (condition) {
    # do something
} else {
    # do something else
}
```

**Example**

```{r, comment=FALSE}
test_even_odd <- function(x){
  if (x %% 2 == 0){
    print("even number")
  } else {
    print("odd number")
  }
}

```

```{r, comment=NA}
test_even_odd(5)
test_even_odd(6)
```

## vectorization with `ifelse`

`ifelse` is vectorized, meaning it works on entire vectors at once.

``` r
ifelse(condition, TRUE condition output, FALSE condition output)
```

Example

```{r, comment=FALSE}
test_even_odd_v2 <- function(x){
  
  ifelse(x %% 2 == 0, "even number", "odd number")
  
}
```

```{r, comment=FALSE}
test_even_odd_v2(5)
test_even_odd_v2(c(1,6))

```

### Difference between `if-else` and `ifelse`

- `if-else`: Evaluates only on one value, not a whole vector.

- `ifelse`: A vectorized function. It checks the condition for every element in a vector and returns a result of the same length, applying `if` or `else` to each element individually.

**`if-else` Example**

```{r, comment=FALSE}
test_even_odd <- function(x){
  if (x %% 2 == 0) {
    print("even number")
  } else {
    print("odd number")
  }
}
```

```{r, comment=FALSE}
test_even_odd(5)

```

```{r, eval=FALSE}
test_even_odd(c(1,6))
# returns an error
```

**`ifelse` Example**



```{r, comment=FALSE}
test_even_odd_v2 <- function(x){
  ifelse (x %% 2 == 0, "even number", "odd number")
}

test_even_odd_v2(5)
test_even_odd_v2(c(1,6))

```

## if–elseif–else

**Teaching analogy**

If the cookie shape is;

  - star → draw a star; 
  
  - if it’s heart → draw a heart; 
  
  - if it’s Christmas tree → draw a tree; 
  
  - if it’s shoe → draw a shoe; 
  
  - if it’s house → draw a house; 

  - else → draw a gingerbread man.
  
```{r, echo=FALSE}
knitr::include_graphics(here::here("img", "chap5", "multipleif.png"))

```



**Syntax and example**

We use `if–elseif–else` when we want to select one option from more than two possible options.

 - The first `if` condition is checked.
 
    - If it’s TRUE, that block runs, and the rest are skipped.

    - If it’s FALSE, the program checks the next elseif condition.

- This continues until one condition is TRUE, or else the final else block runs (if provided).

`if–elseif–else` checks one condition after another.


```{r, comment=NA}
grade_marks <- function(marks){
  
  if (marks < 20) {
    "D"
  } else if (marks <= 50) {
    "C"
  } else if (marks <= 60) {
    "B"
  } else {
    "A"
  }
}

grade_marks(75)
```

## if

It is possible to use only `if` statement.

```{r, comment=NA}
check.negative <- function(x){

  if (x < 0 ) {
  print("X is negative")
  }

}
```

```{r, comment=NA}
check.negative(-10)
check.negative(10)
```

## for

For the first 50 cookies, fill the center of cookies with jam.

## while

## repeat

## break

## next

## switch
