# Data Structures

There are five main data structures in R. They are:

1.  vectors

2.  matrix

3.  array

4.  data frame

5.  list

## Vectors

1.  One dimensional data object.

2.  Homogeneous data structure. That means data in a vector must only be one type or mode (numeric, character, or logical). You cannot mix different types of data. If you try to mix different types of data, R will automatically convert them into one type.

## Creating Vectors

Vectors can be made in four primary ways. They are

i.  using `c()` function

ii. using `:` function

iii. using `seq` function

iv. using `rep` function

Methods iiâ€“iv simplify vector creation. They are useful when there is a pattern in data.

### Concatenate: `c()`

syntax:

Example:

The following will create the vector but not assigned a name.

```{r}
c(1996, 1998, 2000, 2005)
```

Assigning a name to vector:

The advantage of assigning a name is that we can reuse the same set of values by calling the vector name.

```{r}
a <- c(1996, 1998, 2000, 2005)
a
```

### Colon: `:`

The `:` function can be used to create a regular decreasing or increasing sequence.

Examples:

```{r}
1:10
10:1
-0.5:10
-0.3:10
```

In all of the above sequences the increment is one. The output will display the numbers only within the range.

### Sequence: `seq`

`seq` function cal also be used for creating regular sequence. With `seq` you can control the increment and length of the output.

**Example 1**

```{r}
seq(1, 19)
```

**Example 2**

```{r}
seq(1, 19, length.out=8)
```

**Example 3**

```{r}
seq(1, 19, by = 3)
```

## Repeat: `rep`

The `rep` function can be used if there is a pattern of repetition in the data.

**Example 1**

The number 8 is repeated three times.

```{r}
rep(8, 5)
```

**Example 2**

The sequence `1, 2, 3` is repeated five times.

```{r}
rep(1:3, times=5)
```

**Example 3**

Same as in Example 2 above.

```{r}
rep(1:3, 5)
```

**Example 4**

Each element in the sequence is repeated five times.

```{r}
rep(1:3, each=5)
```

**Example 5**

First, each element is repeated five times. After that, the whole sequence is repeated three times.

```{r}
rep(1:3, each=5, times=3)
```

**Example 6**

Same as before. Changing the ordering of `each` and `time` does not change the output.

```{r}
rep(1:3, times=3, each=5)
```

## Coercion

When you try to include different types they will be coerced to the most flexible type.

```{r}
a <- c(1, 3, "GPA", TRUE, 1L)
typeof(a)
```

Explicit coercion means that if we try to convert a data type to another data type intentionally using a specific function. For example,

```{r}
b <- c(3.1, 3.2, 3.7, 5.9)
b
as.integer(b)
```

## Functions that can be used to inspect vectors

Consider the vector below

```{r}
example.vec <- c(1,  2,  3, 4, 5, 6, 7, 8)
```

1.  To check the storage mode

```{r}
typeof(example.vec)
```

2.  To check the class type

```{r}
class(example.vec)
```

3.  Testing functions

```{r}
is.character(example.vec)
is.integer(example.vec)
is.logical(example.vec)
is.double(example.vec)
```

4.  Mathematical and statistical functions

```{r}
sum(example.vec)
mean(example.vec)
summary(example.vec)

```

5.  To check if there are any missing values

```{r}
is.na(example.vec)
```

There are many more functions that you can use with vectors. We will learn about them in the upcoming chapters.

## Exercise

1.  Write R codes to create the following vectors: If you see patterns in the data, use vector simplification methods.

<!-- -->

i.  

```{r, echo=FALSE}
c(1990, 1992, 1934, 1957, 1970, 2000, 2005)
```

ii. 

```{r, echo=FALSE}
rep(c(3, 6, 9), times=5)
```

iii. 

```{r, echo=FALSE}
rep(c(3, 6, 9), each=5)
```

iv. 

```{r, echo=FALSE}
rep(c(3, 6, 9), each=5, times=2)
```

v.  

```{r, echo=FALSE}
seq(1, 36, by=3)
```

vi. 

```{r, echo=FALSE}
seq(0.1, 0.3, length=100)
```

vii. 

```{r, echo=FALSE}
-0.5:10.5

```

viii. 

```{r, echo=FALSE}
seq(1, 36)*2
```

2.  Use the `typeof()` function to check the R storage mode of the following vectors and `class()` to check the class type of the vector.

```{r}
logical_vector <- c(TRUE, FALSE, TRUE, FALSE)
integer_vector <- c(1L, 2L, 3L, 4L)
double_vector <- c(1.1, 2.2, 3.3, 4.4)
complex_vector <- c(1+1i, 2+2i, 3+3i, 4+4i)
character_vector <- c("a", "b", "c", "d")
null_vector <- NULL
time_data <- 1996:2006
time_series_data <- ts(1996:2006)
```

3.  Create the vector (3, 3, 3, . . . 3, 6, 6, . . . 6, 9, 9, 9, . . . 9), where there are 10 occurrences of 3, 20 occurrences of 6 and 30 occurrences of 9.

4.  Find the value of the following expression.

<!-- -->

i.  $\sum_{i=1}^{100}i$

ii. $\sum_{i=1}^{100}i^2$

<!-- -->

5.  Generate a sequence using the code seq(from=1, to=10, by=1). What other ways can you generate the same sequence?

6.  Create a vector to hold population values, and label each element with the corresponding province name. The plot will display population values when hovered over.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(ceylon)
library(ggplot2)
library(viridis)
library(plotly)
library(sf)
p1 <- ggplot(province) + 
  geom_sf(mapping = aes(fill = population), show.legend = TRUE) +
  scale_fill_viridis() 
 
ggplotly(p1)
```

## Vector Operations

To be added

## Creating Matrix

## Matrix Operations

## Exercise

i. Write R codes to obtain following matrix outputs

a.

```{r, echo=FALSE}
matrix(seq(10, 100, by=10), ncol=5)
```

b.

```{r, echo=FALSE}
matrix(seq(10, 100, by=10), ncol=5, byrow = TRUE)
```

c.

```{r, echo=FALSE}
matrix(1:20, ncol=4, dimnames = list(c("Row1", "Row2", "Row3", "Row4", "Row5"), c("C1", "C2", "C3", "C4")))
```

2. Mr. Perera who lives in Soratha Mawatha - Wijerama wants to sell his house. He wants to decide a price for his house to list it in the market. He believes that the size of the house is one likely determinant of price. He asked from 10 homes in the neighbourhood, "what price should you ask for your home? " and the house size (in square feet). The collected data are shown below:

```{r, comment=NA, echo=FALSE}
size_x <- seq(1000, 5500, 500)
price_y <- c(810, 1210, 1450, 1610, 1690, 2010, 1490, 1690, 1890, 2410)
data.frame(size_x, price_y)
```

(a) Write an R code to input `size_x` and `price_y` into two separate vectors.


(b) Mr. Perera wants to compute the least squares estimates of the model $\hat{Y} = \hat{\beta_0} + \hat{\beta_1}X$. Write an R code to compute $\hat{\beta_0}$ and $\hat{\beta_1}$ using the matrix operation $\hat{\beta} = (X^TX)^{-1}X^TY$. Do not use the built-in function `lm`.

Where,

$\hat{\beta} =\begin{pmatrix}
\hat{\beta_0} \\
\hat{\beta_1} \\
\end{pmatrix}$, $Y = 
\begin{pmatrix}
y_1 \\
y_2 \\
y_3 \\
. \\
. \\
. \\
y_n
\end{pmatrix}$ and $X = 
\begin{pmatrix}
1 & x_1 \\
1 & x_2 \\
1 & x_3 \\
. \\
. \\
. \\
1 & x_n
\end{pmatrix}$ 


## Creating Arrays

## Exercise

1. Create a 3D array with 3 columns, 5 rows, and 2 layers in R, and enter the following values into it:

```{r, echo=FALSE}
1:30
```