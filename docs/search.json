[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming and Data ANalysis with R",
    "section": "",
    "text": "Preface\nThe goal of this book is to empower you with essential skills in R programming for statistical computing and data analysis.\nEach chapter of this book is designed to be hands-on and practical, with explanations, illustrative examples, and exercises to reinforce your understanding.\nThis book is written from Quarto."
  },
  {
    "objectID": "intro.html#chapter-roadmap",
    "href": "intro.html#chapter-roadmap",
    "title": "1  Introduction to R and R Studio",
    "section": "1.1 Chapter Roadmap",
    "text": "1.1 Chapter Roadmap\n\nWhat is R?\nWhy learn R?\nR and Rstudio\nInstalling R and Rstudio\nFamiliarize with RStudio interface\nCreating and saving an RStudio project"
  },
  {
    "objectID": "intro.html#what-is-r",
    "href": "intro.html#what-is-r",
    "title": "1  Introduction to R and R Studio",
    "section": "1.2 What is R?",
    "text": "1.2 What is R?\nR is a popular programming language and environment specifically designed for statistical computing, data analysis, and data visualisation. The language designers are Ross Ihaka and Robert Gentleman at the Department of Statistics, University of Auckland, New Zealand. The parent language is S."
  },
  {
    "objectID": "intro.html#why-learn-r",
    "href": "intro.html#why-learn-r",
    "title": "1  Introduction to R and R Studio",
    "section": "1.3 Why learn R?",
    "text": "1.3 Why learn R?\nR is a free and open-source software package.\nHere’s an expansion on how R can be utilized for tasks beyond traditional statistical analysis:\n\nScientific Writing Tools: R can be used for scientific writing, particularly through the use of packages like knitr rmarkdown, and Quarto. These packages allow you to integrate R code directly into documents alongside text and figures, which is highly useful for reproducible research and automated report generation. These are useful for thesis writing, book writing or any other documentation work. This book “Programming and Data Analysis with R” is written based on Quarto.\nWebsite Development: R can be used developed websites, particularly through the use of packages like knitr rmarkdown, blogdown and Quarto. For example, the website https://hellor.netlify.app/ is written based on blogdown and https://thiyangt.github.io/rprogramming/ is written based on quarto.\nCreating Presentations: R can generate dynamic and visually appealing presentations using rmarkdown, xaringan, quarto, etc. These packages enable you to embed R code, plots, and interactive elements directly into presentation slides. Here is an example presentation developed using xaringan https://thiyangt.github.io/whyR2021keynote/#1\nCreating Posters: R can be utilized to design scientific posters using packages such as posterdown. These packages provide templates for creating professional-looking posters directly from R Markdown documents. You can include plots, tables, formatted text and graphics in your poster design.\nWeb Application Development: This capability is particularly useful for developing data-driven tools, simulations, and dashboards that can be accessed through web browsers without the need for users to install additional software."
  },
  {
    "objectID": "intro.html#r-and-rstudio",
    "href": "intro.html#r-and-rstudio",
    "title": "1  Introduction to R and R Studio",
    "section": "1.4 R and RStudio",
    "text": "1.4 R and RStudio"
  },
  {
    "objectID": "intro.html#installing-r-and-rstudio",
    "href": "intro.html#installing-r-and-rstudio",
    "title": "1  Introduction to R and R Studio",
    "section": "1.5 Installing R and Rstudio",
    "text": "1.5 Installing R and Rstudio"
  },
  {
    "objectID": "intro.html#familiarize-with-rstudio-interface",
    "href": "intro.html#familiarize-with-rstudio-interface",
    "title": "1  Introduction to R and R Studio",
    "section": "1.6 Familiarize with RStudio interface",
    "text": "1.6 Familiarize with RStudio interface"
  },
  {
    "objectID": "intro.html#creating-and-saving-an-rstudio-project",
    "href": "intro.html#creating-and-saving-an-rstudio-project",
    "title": "1  Introduction to R and R Studio",
    "section": "1.7 Creating and saving an RStudio project",
    "text": "1.7 Creating and saving an RStudio project"
  },
  {
    "objectID": "intro.html#exercise",
    "href": "intro.html#exercise",
    "title": "1  Introduction to R and R Studio",
    "section": "1.8 Exercise",
    "text": "1.8 Exercise\nThe goal of this exercise is to help you become familiar with the R Studio environment and create and save projects.\n\nCreate a new project in the RStudio IDE. Name your project as lesson1.\nSelect a suitable theme for your RStudio IDE’s user interface.\n\n\nHelp: Navigate to Tools &gt; Global Options &gt; Appearance .\n\n\nChange the RStudio pane layout as follows:\n\n\n\n\n\n\n\nCreate a folder called data inside your lesson1 project folder.\nCreate another folder called src inside your lesson1 project folder.\nOpen a script file and save it as exercise1.R inside the src folder.\nType the following commands on exercise1.R and run it on the console. See the changes happening under the “Environment” tab and the “History” tab.\n\n\n100 + 200\nrnorm(100)\ngrades &lt;- c(\"A+\", \"A-\", \"A\", \"B\", \"F\")\nrandom.numbers &lt;- rnorm(100)\nrandom.numbers*100\nls()\n\n\nClose the project by saving the workspace.\nReopen your project by clicking the leason1.Rproj inside your lesson1 folder. Open the .RData file and the .Rhistory file and observe them.\nType the following commands on exercise1.R and run them on the console.\n\n\nmarks &lt;- c(100, 70, 80, 60)\n\n\nClose the project without saving the workspace.\nReopen the lesson1.Rproj and type ls() on the console, and observe the output. (marks is not listed, but the other objects are available. Why?)\nType the following command in the console to observe changes in the console, environment, history, and Viewer windows. Observe the outputs of the code and gain an understanding of the purpose of each line.\n\n\ndata(\"iris\")\nView(iris)\nsummary(iris)\nhist(iris$Sepal.Length)\nplot(x=iris$Sepal.Length, y=iris$Sepal.Width) # Method 1\nplot(Sepal.Length ~ Sepal.Width, data=iris) # Method 2\nplot(x=iris$Sepal.Length, y=iris$Sepal.Width, col=iris$Species) \nplot(Sepal.Length ~ Sepal.Width, data=iris)\nplot(Sepal.Length ~ Sepal.Width, pch=16, cex=0.6, data=iris)\nplot(Sepal.Length ~ Sepal.Width, pch=16, cex=0.6, data=iris)\nplot(Sepal.Length ~ Sepal.Width, col=\"forestgreen\", pch=16, cex=0.6, data=iris)\n\n\nType the following code to obtain list of predefined colours.\n\n\ncolours()\n\n\nExplore what changes the following code do on the last plot that you took.\n\ncode chunk 15.1\n\nplot(Sepal.Length ~ Sepal.Width, col=\"forestgreen\", pch=16, cex=0.6, data=iris, main = \"Scatterplot Between Sepal Length and Petal Length\",\n     xlab = \"Sepal Length (cm)\",\n     ylab = \"Sepal Width (cm)\")\n\ncode chunk 15.2\n\nmodel &lt;- lm(Sepal.Length ~ Sepal.Width, data=iris)\nplot(Sepal.Length ~ Sepal.Width, col=\"forestgreen\", pch=16, cex=0.6, data=iris, main = \"Scatterplot Between Sepal Length and Petal Length\",\n     xlab = \"Sepal Length (cm)\",\n     ylab = \"Sepal Width (cm)\")\nabline(model, col=\"tomato1\")\n\n\nType the following commands and understand what each line of code is doing. Interpret the outputs.\n\ncode chunk 16.1\n\nplot(iris)\n\ncode chunk 16.2\n\nplot(~ Petal.Length + Petal.Width + Sepal.Width, data=iris)\n\n\nType the following command and open your data folder and see the changes that had occurred.\n\n\nwrite.csv(iris, file=\"data/iris.csv\")"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  }
]